var events = require('events');

var handler = function() {
    var self = this;
    self.eventEmitter = new events.EventEmitter();
    self.registClock = [];
    self.clockStart();
}

function chkTime(registTime
, currTime) {
    var diff = (registTime.getTime() - currTime.getTime());
    if (diff > 0) {
        return {
            result: true,
            value: diff
        };
    } else {
        return {
            result: false,
            value: -1
        };
    }
}

function chkParams( name, hours, minutes ){
    if (typeof(name) == "undefined" || name == null) {
        name = 'default';
    }else{
        if (typeof(name) != "string" ) {
            return {
                result: false,
                log: 'name is not a string'
            };
        }
    }

    if (typeof(hours) == "undefined" || hours == null) {
        return {
            result: false,
            log: 'no define hours'
        };
    }

    if (typeof(minutes) == "undefined" || minutes == null) {
        return {
            result: false,
            log: 'no define minutes'
        };
    }

    return {
        result: true
    };
}

handler.prototype.clockStart = function() {
    var self = this;

    (function() {
        setInterval(function() {
            self.registClock.forEach(function(time) {
                if (time.trigger) {
                    var currTime = new Date();
                    var currHour = currTime.getHours();
                    var currMin = currTime.getMinutes();
                    var currSec = currTime.getSeconds();

                    var registHour = time.time.getHours();
                    var registMin = time.time.getMinutes();
                    var registSec = time.time.getSeconds();

                    if (time.cycle) {
                        if ((registHour == currHour) && (currMin == registMin) && (currSec == 0)) {
                            console.log("trigger Cycle");
                            self.eventEmitter.emit('TREGGER_CYCLE', time.name);
                            var d = time.time.getTime();
                            time.time = new Date(d + 1000 * 60 * 60 * 24);
                        }
                    } else {
                        if ((registHour == currHour) && (currMin == registMin) && (currSec == 0)) {
                            console.log("trigger Non Cycle");
                            self.eventEmitter.emit('TREGGER_ONCE', time.name);
                            time.trigger = false;
                        }
                    }
                }
            })
        }, 1000);
    }());
}

handler.prototype.addOnce = function(name, hours, minutes) {
    var self = this;
    var _name = name;
    var _hours = hours;
    var _minutes = minutes;

    var chkRes = chkParams( _name, _hours, _minutes);
    if( !chkRes.result ){
        return chkRes;
    }


    var registTime = new Date();
    var currTime = new Date();
    registTime.setSeconds(0);
    registTime.setMinutes(_minutes);
    registTime.setHours(_hours);

    var notifyTime = chkTime(registTime, currTime);
    if (notifyTime.result) {
        self.registClock.push({
            name: _name,
            trigger: true,
            time: registTime,
            cycle: false
        });
        console.log("Regist Time = " + registTime);

    } else {
        var d = registTime.getTime();
        var modifyTime = new Date(d + 1000 * 60 * 60 * 24);
        self.registClock.push({
            name: _name,
            trigger: true,
            time: modifyTime,
            cycle: false
        });
        console.log("Regist Time = " + modifyTime);
    }
}

handler.prototype.addCycle = function(name, hours, minutes) {
    var self = this;
    var _name = name;
    var _hours = hours;
    var _minutes = minutes;

    var chkRes = chkParams( _name, _hours, _minutes);
    if( !chkRes.result ){
        return chkRes;
    }

    var registTime = new Date();
    var currTime = new Date();
    registTime.setSeconds(0);
    registTime.setMinutes(_minutes);
    registTime.setHours(_hours);

    var notifyTime = chkTime(registTime, currTime);
    if (notifyTime.result) {
        self.registClock.push({
            name: _name,
            trigger: true,
            time: registTime,
            cycle: true
        });
        console.log("Regist Time = " + registTime);

    } else {
        var d = registTime.getTime();
        var modifyTime = new Date(d + 1000 * 60 * 60 * 24);
        self.registClock.push({
            name: _name,
            trigger: true,
            time: modifyTime,
            cycle: true
        });
        console.log("Regist Time = " + modifyTime);
    }

    return {
        result: true,
        log: 'success'
    };
}

handler.prototype.remove = function(name) {
    var self = this;
    self.registClock.forEach(function(clock) {
        if (clock.name == name) {
            index = self.registClock.indexOf(clock);
            self.registClock.splice(index, 1);
            // return {
            //     result: true,
            //     log: 'remove one success'
            // };
        }
    });
}

handler.prototype.listen = function(callback) {
    var self = this;
    self.eventEmitter.on('TREGGER_CYCLE', function(data) {
        callback(data);
        console.log(self.registClock);
    });
    self.eventEmitter.on('TREGGER_ONCE', function(data) {
        callback(data);
        console.log(self.registClock);
    });
}

module.exports = handler;
